{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "vpcTag": {
      "Type": "String"
    },
    "igTag": {
      "Type": "String"
    },
    "publicRouteTableTag": {
      "Type": "String"
    },
    "privateRouteTableTag": {
      "Type": "String"
    },
    "webSubnetTag": {
      "Type": "String"
    },
    "webSubnet2Tag": {
      "Type": "String"
    },
    "webSubnet3Tag": {
      "Type": "String"
    },
    "webServerSecurityGroupNameTag": {
      "Type": "String"
    },
    "dbSecurityGroupNameTag": {
      "Type": "String"
    },
    "vpccidr": {
      "Type": "String"
    },
    "websubnetcidr": {
      "Type": "String"
    },
    "ec2StorageSize": {
      "Type": "String"
    },
    "websubnet2cidr": {
      "Type": "String"
    },
    "websubnet3cidr": {
      "Type": "String"
    },
    "ec2AMI": {
      "Type": "String"
    },
    "InstanceTypeParameter": {
      "Type": "String",
      "Default": "t3.micro",
      "AllowedValues": [
        "t2.micro",
        "t3.micro",
        "m1.small",
        "m1.large"
      ],
      "Description": "Enter t2.micro, m1.small, or m1.large. Default is t2.micro."
    },
    "RdsUserName": {
      "Type": "String"
    },
    "RdsPassword": {
      "Type": "String"
    },
    "RdsDbName": {
      "Type": "String"
    },
    "dbsubnetcidr1": {
      "Type": "String"
    },
    "stackRegion": {
      "Type": "String"
    },
    "dbsubnetcidr2": {
      "Type": "String"
    },
    "BucketnameDeploy": {
      "Type": "String",
      "Description": "UPLOADING ARTIFACTS BUCKET"
    },
    "ApplicationName": {
      "Type": "String"
    },
    "sshkey": {
      "Type": "String"
    },
    "AWSCodeDeployRoleARN": {
      "Type": "String",
      "Default": "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
    },
    "AwsAccountId": {
      "Type": "String"
    },
    "LoadBalancerGivenName": {
      "Type": "String"
    },
    "HOSTEDZONEID": {
      "Type": "String"
    },
    "DOMAIN": {
      "Type": "String"
    },
    "queueName": {
      "Type": "String",
      "Default": "lambdaQueue"
    },
    "topicname": {
      "Type": "String",
      "Default": "webapptopic"
    },
    "S3lambdabucket": {
      "Type": "String",
      "Default": "serverless.amanshah.xyz"
    },
    "FunctionName": {
      "Type": "String",
      "Default": "LambdaFunctionName"
    },
    "LambdaHandler": {
      "Type": "String",
      "Default": "lambda_function.lambda_handler"
    },
    "DomainNameLambda": {
      "Type": "String",
      "Default": "prod.amanshah.xyz"
    }
  },
  "Resources": {
    "myVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "vpccidr"
        },
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "vpcTag"
            }
          }
        ]
      }
    },
    "webSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "websubnetcidr"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "webSubnetTag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "webSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "websubnet2cidr"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "webSubnet2Tag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "webSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "websubnet3cidr"
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "webSubnet3Tag"
            }
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            2,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }
      }
    },
    "dbSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "dbsubnetcidr1"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DBSUBNET1"
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "dbSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Ref": "dbsubnetcidr2"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DBSUBNET2"
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "myInternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "igTag"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "InternetGatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },
    "publicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "publicRouteTableTag"
            }
          }
        ]
      }
    },
    "privateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "myVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "privateRouteTableTag"
            }
          }
        ]
      }
    },
    "publicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "myInternetGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "myInternetGateway"
        }
      }
    },
    "publicRouteTableSubnetAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "SubnetId": {
          "Ref": "webSubnet"
        }
      }
    },
    "publicRouteTableSubnetAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "SubnetId": {
          "Ref": "webSubnet2"
        }
      }
    },
    "publicRouteTableSubnetAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "publicRouteTable"
        },
        "SubnetId": {
          "Ref": "webSubnet3"
        }
      }
    },
    "privateRouteTableSubnetAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateRouteTable"
        },
        "SubnetId": {
          "Ref": "dbSubnet2"
        }
      }
    },
    "privateRouteTableSubnetAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "privateRouteTable"
        },
        "SubnetId": {
          "Ref": "dbSubnet1"
        }
      }
    },
    "webServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Ref": "webServerSecurityGroupNameTag"
        },
        "GroupDescription": "Security tag for web server",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 8080,
            "IpProtocol": "tcp",
            "ToPort": 8080
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "dbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Ref": "dbSecurityGroupNameTag"
        },
        "GroupDescription": "Security tag for web server",
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "webServerSecurityGroup"
            },
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432
          }
        ],
        "VpcId": {
          "Ref": "myVPC"
        }
      }
    },
    "EC2InstanceAutoscaled": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "ImageId": {
          "Ref": "ec2AMI"
        },
        "InstanceType": {
          "Ref": "InstanceTypeParameter"
        },
        "LaunchConfigurationName": "EC2webapplication",
        "SecurityGroups": [
          {
            "Ref": "webServerSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": {
                "Ref": "ec2StorageSize"
              }
            }
          }
        ],
        "KeyName": {
          "Ref": "sshkey"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_USERNAME=${rusername}' >> /etc/environment",
                    {
                      "rusername": {
                        "Ref": "RdsUserName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_PASSWORD=${rpassword}' >> /etc/environment",
                    {
                      "rpassword": {
                        "Ref": "RdsPassword"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDS_DBNAME=${hname}' >> /etc/environment",
                    {
                      "hname": {
                        "Ref": "RdsDbName"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'S3BUCKET_NAME=${s3name}' >> /etc/environment",
                    {
                      "s3name": {
                        "Ref": "S3bucket"
                      }
                    }
                  ]
                },
                {
                  "Fn::Sub": [
                    "/bin/echo 'RDSHOST_NAME=${host}' >> /etc/environment",
                    {
                      "host": {
                        "Fn::GetAtt": [
                          "myRDSInstance",
                          "Endpoint.Address"
                        ]
                      }
                    }
                  ]
                }
              ]
            ]
          }
        }
      }
    },
    "myDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet description of db subnets",
        "SubnetIds": [
          {
            "Ref": "dbSubnet2"
          },
          {
            "Ref": "dbSubnet1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "dbSubnetGroup"
          }
        ]
      }
    },
    "myRDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "RdsDbName"
        },
        "AllocatedStorage": "8",
        "BackupRetentionPeriod": "0",
        "Engine": "postgres",
        "EngineVersion": "11.5",
        "DBInstanceClass": "db.t3.micro",
        "MultiAZ": false,
        "DBInstanceIdentifier": "csye6225-spring2020",
        "MasterUsername": {
          "Ref": "RdsUserName"
        },
        "MasterUserPassword": {
          "Ref": "RdsPassword"
        },
        "DBSubnetGroupName": {
          "Ref": "myDBSubnetGroup"
        },
        "PubliclyAccessible": false,
        "VPCSecurityGroups": [
          {
            "Ref": "dbSecurityGroup"
          }
        ]
      }
    },
    "S3bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Status": "Enabled",
              "Transition": {
                "StorageClass": "STANDARD_IA",
                "TransitionInDays": 30
              }
            }
          ]
        }
      }
    },
    "ListS3BucketsPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ListS3BucketsPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:List*",
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:PutObjectAcl"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3bucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3bucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "BucketnameDeploy"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "BucketnameDeploy"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ListS3BucketsRole"
          }
        ]
      }
    },
    "ListS3BucketsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ListS3BucketsRole"
          }
        ],
        "InstanceProfileName": "InstanceProfile"
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "loadbalancer_securitygroup",
        "GroupDescription": "Enable HTTP access via port 80, HTTPS via port 443",
        "VpcId": {
          "Ref": "myVPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Ref": "LoadBalancerGivenName"
        },
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Ref": "webSubnet"
          },
          {
            "Ref": "webSubnet2"
          },
          {
            "Ref": "webSubnet3"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "CSYE_6225_AutoScaling"
          }
        ],
        "Type": "application",
        "IpAddressType": "ipv4"
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "LBTargetGroup",
        "Port": "8080",
        "HealthCheckPort": "8080",
        "Matcher": {
          "HttpCode": "401,200"
        },
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 9,
        "HealthyThresholdCount": 2,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "myVPC"
        },
        "TargetGroupAttributes": [
          {
            "Value": "35",
            "Key": "deregistration_delay.timeout_seconds"
          }
        ],
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "TargetGroup"
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "CSYE_6225_AutoScaling"
          }
        ]
      }
    },
    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ALBTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "LoadBalancer"
        },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "WebServerAutoscalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "EC2InstanceAutoscaled"
        },
        "MinSize": "2",
        "DesiredCapacity": "2",
        "MaxSize": "3",
        "TargetGroupARNs": [
          {
            "Ref": "ALBTargetGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Ec2_instance",
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "webSubnet"
          },
          {
            "Ref": "webSubnet2"
          },
          {
            "Ref": "webSubnet3"
          }
        ]
      },
      "DependsOn": "ALBListener"
    },
    "AutoScaleWebServerUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoscalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "AutoScaleWebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoscalingGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 5 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "40",
        "AlarmActions": [
          {
            "Ref": "AutoScaleWebServerUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerAutoscalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "20",
        "AlarmActions": [
          {
            "Ref": "AutoScaleWebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerAutoscalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
          "arn:aws:iam::aws:policy/CloudWatchActionsEC2Access"
        ],
        "RoleName": "CodeDeployEC2ServiceRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "CodeDeployServiceRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Ref": "AWSCodeDeployRoleARN"
          }
        ]
      }
    },
    "CircleCICodeDeploy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CircleCI-Code-Deploy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "stackRegion"
                      },
                      ":",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":application:",
                      {
                        "Ref": "ApplicationName"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": [
                "*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:GetDeploymentConfig"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "stackRegion"
                      },
                      ":",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "stackRegion"
                      },
                      ":",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      {
                        "Ref": "stackRegion"
                      },
                      ":",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          "circleCi"
        ],
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": {
          "Ref": "ApplicationName"
        },
        "ComputePlatform": "Server"
      }
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {
          "Ref": "CodeDeployApplication"
        },
        "AutoRollbackConfiguration": {
          "Enabled": "true",
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITH_TRAFFIC_CONTROL"
        },
        "AutoScalingGroups": [
          {
            "Ref": "WebServerAutoscalingGroup"
          }
        ],
        "Ec2TagFilters": [
          {
            "Key": "Name",
            "Value": "Ec2_instance",
            "Type": "KEY_AND_VALUE"
          }
        ],
        "LoadBalancerInfo": {
          "TargetGroupInfoList": [
            {
              "Name": {
                "Fn::GetAtt": [
                  "ALBTargetGroup",
                  "TargetGroupName"
                ]
              }
            }
          ]
        },
        "AutoRollbackConfiguration": {
          "Enabled": "true",
          "Events": [
            "DEPLOYMENT_FAILURE"
          ]
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployServiceRole",
            "Arn"
          ]
        }
      }
    },
    "CodeDeployEC2S3": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CodeDeploy-EC2-S3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "s3:Get*",
                "s3:List*",
                "s3:Put*",
                "s3:Delete*"
              ],
              "Effect": "Allow",
              "Resource": [
                "*"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "CircleCIUploadToS3": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "CircleCI-Upload-To-S3",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "BucketnameDeploy"
                    },
                    "/*"
                  ]
                ]
              }
            }
          ]
        },
        "Users": [
          "circleCi"
        ],
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },
    "Route53RecordSetA": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "DNSName"
            ]
          },
          "EvaluateTargetHealth": "true",
          "HostedZoneId": {
            "Fn::GetAtt": [
              "LoadBalancer",
              "CanonicalHostedZoneID"
            ]
          }
        },
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DOMAIN"
              },
              "."
            ]
          ]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DOMAIN"
              },
              "."
            ]
          ]
        },
        "Type": "A"
      }
    },
    "SqsQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "DelaySeconds": 2,
        "MessageRetentionPeriod": 1800,
        "QueueName": {
          "Ref": "queueName"
        },
        "ReceiveMessageWaitTimeSeconds": 10,
        "VisibilityTimeout": 10
      }
    },
    "LambdaSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": {
          "Ref": "topicname"
        },
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "lambdafunction",
                "Arn"
              ]
            },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "lambdafunction": {
      "Type": "AWS::Lambda::Function",
      "Description": "lambda function for triggering dynamo db and email",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "S3lambdabucket"
          },
          "S3Key": "serverless.zip"
        },
        "FunctionName": {
          "Ref": "FunctionName"
        },
        "Handler": {
          "Ref": "LambdaHandler"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaServiceRole",
            "Arn"
          ]
        },
        "Runtime": "python3.8",
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "DOMAIN_NAME": {
              "Ref": "DomainNameLambda"
            },
            "DYNAMO_TABLE": "Duedate"
          }
        }
      }
    },
    "DynamoDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TimeToLiveSpecification": {
          "AttributeName": "deleteTime",
          "Enabled": "true"
        },
        "BillingMode": "PROVISIONED",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "2",
          "WriteCapacityUnits": "2"
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "TableName": "Duedate",
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ]
      }
    },
    "EC2AccessToSQSSNS": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "EC2_Access_SNS_SQS_policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "sqs:*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:sqs:*:",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "sns:*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:sns:*:",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          "circleCi"
        ],
        "Roles": [
          {
            "Ref": "ListS3BucketsRole"
          }
        ]
      }
    },
    "LambdaServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ],
        "RoleName": "LambdaServiceRole"
      }
    },
    "lambdaforCallingCloudWatchAgentAndDynamoDB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaToDynamoDBPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "DynamoDB",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:logs:",
                      {
                        "Ref": "stackRegion"
                      },
                      ":",
                      {
                        "Ref": "AwsAccountId"
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "logs:CreateLogGroup",
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ses:SendEmail",
                "ses:SendRawEmail"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3lambdabucket"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          "circleCi"
        ],
        "Roles": [
          {
            "Ref": "LambdaServiceRole"
          }
        ]
      }
    },
    "LambdaTriggerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "LambdaSNSTopic"
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "lambdafunction",
            "Arn"
          ]
        }
      }
    },
    "AWSLambdaExecutingPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "ManagedPolicyName": "AWSLambdaExecutepolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "lambda:UpdateFunctionCode"
              ],
              "Resource": "*"
            }
          ]
        },
        "Users": [
          "circleCi"
        ],
        "Roles": [
          {
            "Ref": "ListS3BucketsRole"
          }
        ]
      }
    },

    "SNSTopicSubscribingPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [
          {
            "Ref": "ListS3BucketsRole"
          }
        ],
        "PolicyName": "SNS-Topic-Subscribe",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": {
                "Ref": "LambdaSNSTopic"
              }
            }
          ]
        }
      }
    }
  },

  "Outputs": {
    "EC2": {
      "Description": "The ID of the EC2 Instance",
      "Value": {
        "Ref": "EC2InstanceAutoscaled"
      },
      "Export": {
        "Name": "csye6225-cf-ec2"
      }
    },
    "vpcId": {
      "Description": "The ID of the VPC",
      "Value": {
        "Ref": "myVPC"
      },
      "Export": {
        "Name": "csye6225-Networking-vpc"
      }
    },
    "dbSubnet1Id": {
      "Description": "The ID of the db subnet 2",
      "Value": {
        "Ref": "dbSubnet1"
      }
    },
    "dbSubnet2Id": {
      "Description": "The ID of the db subnet 2",
      "Value": {
        "Ref": "dbSubnet2"
      },
      "Export": {
        "Name": "csye6225-Networking-db-subnet2Id"
      }
    },
    "webSubnetId": {
      "Description": "The ID of web subnet",
      "Value": {
        "Ref": "webSubnet"
      },
      "Export": {
        "Name": "csye6225-Networking-web-subnet"
      }
    },
    "webSubnet2Id": {
      "Description": "The ID of web subnet",
      "Value": {
        "Ref": "webSubnet2"
      },
      "Export": {
        "Name": "csye6225-Networking-web-subnet2"
      }
    },
    "webSubnet3Id": {
      "Description": "The ID of web subnet",
      "Value": {
        "Ref": "webSubnet3"
      },
      "Export": {
        "Name": "csye6225-Networking-web-subnet3"
      }
    },
    "webServerSecurityGroupId": {
      "Description": "The ID of web server security group",
      "Value": {
        "Ref": "webServerSecurityGroup"
      },
      "Export": {
        "Name": "csye6225-Networking-web-security-group"
      }
    },
    "dbSecurityGroupId": {
      "Description": "The ID of RDS security group",
      "Value": {
        "Ref": "dbSecurityGroup"
      },
      "Export": {
        "Name": "csye6225-Networking-db-security-group"
      }
    }
  }
}